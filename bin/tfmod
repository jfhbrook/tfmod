#!/usr/bin/env bash

set -euo pipefail

# Enough logging to launch tfmod

function log {
  local level
  level="${1}"
  shift
  echo "${level}:" "$@" 1>&2
}

function error {
  log error "$@"
}

function fatal {
  error "$@"
  exit 1
}

# Check if a bin is installed

function has-bin {
  if which "${1}" > /dev/null 2>&1; then
    info "found ${1} at $(which "${1}")"
    return 0
  fi

  info "could not find ${1}"
  return 1
}

LOG_LEVEL='info'
ARGV="$*"
COMMAND=''
SHOW_HELP=''

UNWISE_HELP='usage: tfmod unwise

Remove tfmod and all its files.'

UPDATE_HELP='usage: tfmod update

Install or update tfmod and its dependencies.'

while [[ $# -gt 0 ]]; do
  case "${1}" in
    -h|-help|--help)
      SHOW_HELP=1
      shift
      ;;
    update|unwise)
      if [ -z "${COMMAND}" ]; then
        COMMAND="${1}"
      fi
      shift
      ;;
    -log-level|--log-level)
      LOG_LEVEL="${2}"
      shift
      shift
      ;;
    -log-level=*|--log-level=*)
      LOG_LEVEL="${1#*=}"
      shift
      ;;
    *)
      shift
      ;;
  esac
done

# unwise takes priority over everything
if [[ "${COMMAND}" == 'unwise' ]]; then
  if [ -n "${SHOW_HELP}" ]; then
    echo "${UNWISE_HELP}"
    exit 0
  fi

  rm -rf ~/.local/state/tfmod
  rm -f "${BASH_SOURCE[0]}"
  info 'tfmod is uninstalled'
  exit 0
fi

# If not cloned, we need to install tfmod
if [ ! -d ~/.local/state/tfmod ]; then
  COMMAND='install'
fi

UL_TFMOD="run 'tfmod update' to install tfmod"

# If we're not installing, run
if [[ "${COMMAND}" != 'update' ]]; then
  cd ~/.local/state/tfmod || fatal "${INSTALL_TFMOD}"
  if [ ! -d .venv ]; then
    fatal "${INSTALL_TFMOD}"
  fi

  # rather than using uv, just use the virtualenv directly...

  # shellcheck disable=SC1091
  source .venv/bin/activate
  exec tfmod "${ARGV[@]}"
fi

#
# Installer/updater
#
# This follows the regular code path in an effort to help
# avoid unneeded interpreting on the part of bash and hopefully
# make things imperceptibly faster
#

if [ -n "${SHOW_HELP}" ]; then
  echo "${UPDATE_HELP}"
  exit 0
fi

UPDATE_OK='tfmod is installed and updated'
UPDATE_ERR='failed to install or update tfmod'

# More logging functions
function is-debug {
  [[ "${LOG_LEVEL}" == 'debug' ]]
}

function is-info {
  [[ "${LOG_LEVEL}" == 'info' ]] || is-debug
}

function is-warn {
  [[ "${LOG_LEVEL}" == 'warn' ]] || is-info
}

function debug {
  if is-debug; then
    log debug "$@"
  fi
}

function info {
  if is-info; then
    log info "$@"
  fi
}

function warn {
  if is-warn; then
    log warn "$@"
  fi
}

# Ensure log level is set correctly
case "${LOG_LEVEL}" in
  debug|info|warn|error)
    ;;
  *)
    LOG_LEVEL='warn'
    log-warn "unknown log level ${LOG_LEVEL}"
esac

# Confirm y/n
function confirm {
  local choice
  read -r -p "❓ ${1} (y/N) " choice
  case "${choice}" in
    y|yes|Y|YES)
      return 0
      ;;
    *)
      fatal 'cowardly refusing to continue.'
      ;;
  esac
}

# OS detection

function is-macos {
  if [[ "${OSTYPE}" == "darwin"* ]]; then
    debug 'macos detected'
    return 0
  fi
  return 1
}

PACKAGES=()

function use-package {
  local cmd
  local pkg

  cmd="${1}"
  pkg="${2:-${1}}"

  if ! has-bin "${cmd}"; then
    PACKAGES+=("${pkg}")
  fi
}

function no-packages {
  [ ${#PACKAGES[@]} -eq 0 ]
}

# homebrew based installs

function install-homebrew {
  if confirm 'Would you like to install homebrew?'; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    info 'homebrew installed'
    return 0
  fi
  return 1
}

function brew-install {
  if no-packages; then return 0; fi

  if ! has-bin brew; then
    install-homebrew
  fi

  info 'Installing the following homebrew formulas:'
  for formula in "${HOMEBREW_FORMULAS[@]}"; do
    info "- ${formula}"
  done

  # Homebrew doesn't prompt by default
  if confirm 'Would you like to install these formulas with homebrew?'; then
    brew install "${HOMEBREW_FORMULAS[@]}"
    return 0
  fi
  return 1
}

# linux-based installs

function apt-install {
  if no-packages; then return 0; fi
  sudo apt install "${PACKAGES[@]}"
}

function dnf-install {
  if no-packages; then return 0; fi
  sudo dnf install "${PACKAGES[@]}"
}

# do it up

function install-brew-packages {
  use-package git
  use-package python
  use-package terraform hashicorp/tap/terraform
  brew-install
}

function install-apt-packages {
  use-package git
  use-package python3
  apt-install
}

function install-dnf-packages {
  use-package git
  use-package python3
  dnf-install
}

function install-packages {
  if is-macos; then
    install-brew-packages
  elif has-bin apt; then
    install-apt-packages
  elif has-bin dnf; then
    install-dnf-packages
  else
    fatal 'do not know how to install packages'
  fi
}

# uv related shenanigans

UV_BIN=''

function find-uv {
  if [ -n "${UV_BIN}" ]; then
    return 0
  fi

  if which uv &> /dev/null; then
    UV_BIN="$(which uv)"
  elif [ -f "${XDG_BIN_HOME}/uv" ]; then
    UV_BIN="${XDG_BIN_HOME}/uv"
  elif [ -f "${XDG_DATA_HOME}/../bin/uv" ]; then
    UV_BIN="$(realpath "${XDG_DATA_HOME}/../bin/uv")"
  elif [ -f "${HOME}/.local/bin/uv" ]; then
    UV_BIN="${HOME}/.local/bin/uv"
  fi

  if [ -n "${UV_BIN}" ]; then
    info "found uv at ${UV_BIN}"
    return 0
  fi
  return 1
}

function assert-uv {
  if [ -z "${UV_BIN}" ]; then
    fatal 'could not find uv'
  fi
}

function install-uv {
  if find-uv; then
    return 0
  fi

  info 'uv is installed with the following command:'
  info
  info '    curl -LsSf https://astral.sh/uv/install.sh | sh'
  info

  if confirm 'would you like to install uv?'; then
    curl -LsSf https://astral.sh/uv/install.sh | sh
    return 0
  fi
  return 1
}

function install-terraform {
  if has-bin terraform; then
    return 0
  fi

  warn 'in order to use tfmod, you need to install terraform'
  warn 'you may find instructions here:'
  warn
  warn '    https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli'
  warn
  warn 'alternately, consider the tool '\'tfswitch\'':'
  warn
  warn '    https://tfswitch.warrensbox.com/'
  warn
  error 'without terraform, tfmod can not continue'
  return 1
}

function install-tfmod {
  mkdir -p ~/.local/state

  if [ ! -d ~/.local/state/tfmod ]; then
    info 'installing tfmod to ~/.local/state/tfmod...'
    (cd ~/.local/state && git clone git@github.com:jfhbrook/tfmod.git)
  else
    info 'updating tfmod in ~/.local/state/tfmod...'
    (cd ~/.local/state/tfmod && git pull origin)
  fi
  find-uv
  assert-uv
  info 'updating dependencies...'
  (cd ~/.local/state/tfmod \
    && terraform -chdir=./modules/tfmod init -upgrade \
    && "${UV_BIN}" sync --extra dev \
    && "${UV_BIN}" pip install .)

  if [ -z "${CALLED_FROM_INSTALLER:-}" ]; then
    info 'copying tfmod to ~/.local/bin/tfmod...'
    mkdir -p ~/.local/bin
    cp ~/.local/state/tfmod/bin/tfmod ~/.local/bin/tfmod
  fi
  chmod +x ~/.local/bin/tfmod
}

function check-path {
  if ! which tfmod &> /dev/null; then
    warn 'tfmod not found on your PATH. you may need to add the following to your'
    warn 'shell profile (ie ~/.bashrc, ~/.zshrc):'
    warn
    warn '    export PATH="${PATH}:${HOME}/.local/bin"'
    warn
  fi
}

function install {
  install-packages
  install-terraform
  install-uv
  install-tfmod
  check-path
  info "${UPDATE_OK}"
}

install || fatal "${UPDATE_ERR}"
